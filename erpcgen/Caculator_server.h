/*
 * Copyright (c) 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2017 NXP
 * All rights reserved.
 *
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.11.0 on Sun Aug 27 17:53:43 2023.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_Caculator_server_h_)
#define _Caculator_server_h_

#ifdef __cplusplus
#include "erpc_server.hpp"
#include "erpc_codec.hpp"
extern "C"
{
#include "Caculator.h"
#include <stdint.h>
#include <stdbool.h>
}

#if 11100 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif


/*!
 * @brief Service subclass for IMath.
 */
class IMath_service : public erpc::Service
{
public:
    IMath_service() : Service(kIMath_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for add of IMath interface. */
    erpc_status_t add_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

/*!
 * @brief Service subclass for ICounter.
 */
class ICounter_service : public erpc::Service
{
public:
    ICounter_service() : Service(kICounter_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for set_counter of ICounter interface. */
    erpc_status_t set_counter_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for get_counter of ICounter interface. */
    erpc_status_t get_counter_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

extern "C" {
#else
#include "Caculator.h"
#endif // __cplusplus

typedef void * erpc_service_t;

/*! @brief Return IMath_service service object. */
erpc_service_t create_IMath_service(void);

/*! @brief Destroy IMath_service service object. */
void destroy_IMath_service(erpc_service_t service);

/*! @brief Return ICounter_service service object. */
erpc_service_t create_ICounter_service(void);

/*! @brief Destroy ICounter_service service object. */
void destroy_ICounter_service(erpc_service_t service);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _Caculator_server_h_
